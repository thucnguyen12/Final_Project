
project_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08001ea4  08001ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa0  08001fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fa8  08001fa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08001fbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001fbc  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009014  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177f  00000000  00000000  00029049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1af  00000000  00000000  0002ba20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d00d  00000000  00000000  0004abcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf2bb  00000000  00000000  00057bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116e97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  00116ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001e8c 	.word	0x08001e8c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08001e8c 	.word	0x08001e8c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9a8 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f805 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f85e 	bl	8000598 <MX_GPIO_Init>
  MX_CRC_Init();
 80004dc:	f000 f848 	bl	8000570 <MX_CRC_Init>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x14>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b092      	sub	sp, #72	; 0x48
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 fcc3 	bl	8001e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000516:	2308      	movs	r3, #8
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 800051a:	23f0      	movs	r3, #240	; 0xf0
 800051c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800051e:	2302      	movs	r3, #2
 8000520:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000522:	2304      	movs	r3, #4
 8000524:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4618      	mov	r0, r3
 800052c:	f000 faf0 	bl	8000b10 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000536:	f000 f864 	bl	8000602 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800054a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800054c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2103      	movs	r1, #3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fdd8 	bl	800110c <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000562:	f000 f84e 	bl	8000602 <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3748      	adds	r7, #72	; 0x48
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_CRC_Init+0x20>)
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <MX_CRC_Init+0x24>)
 8000578:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_CRC_Init+0x20>)
 800057c:	f000 fa9e 	bl	8000abc <HAL_CRC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000586:	f000 f83c 	bl	8000602 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	40023000 	.word	0x40023000

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MX_GPIO_Init+0x48>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40023800 	.word	0x40023800

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 f937 	bl	8000868 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000606:	b672      	cpsid	i
}
 8000608:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <Error_Handler+0x8>

0800060c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <HAL_MspInit+0x48>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <HAL_MspInit+0x48>)
 8000630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000634:	6453      	str	r3, [r2, #68]	; 0x44
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x48>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_MspInit+0x48>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_MspInit+0x48>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_MspInit+0x48>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40023800 	.word	0x40023800

0800066c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_CRC_MspInit+0x38>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d10d      	bne.n	800069a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_CRC_MspInit+0x3c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_CRC_MspInit+0x3c>)
 8000688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_CRC_MspInit+0x3c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40023000 	.word	0x40023000
 80006a8:	40023800 	.word	0x40023800

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	; 0x30
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	201c      	movs	r0, #28
 80006c2:	f000 f9b7 	bl	8000a34 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c6:	201c      	movs	r0, #28
 80006c8:	f000 f9e0 	bl	8000a8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_InitTick+0xa8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <HAL_InitTick+0xa8>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <HAL_InitTick+0xa8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006e8:	f107 0210 	add.w	r2, r7, #16
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ffd2 	bl	800169c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006f8:	f000 ffae 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 80006fc:	4603      	mov	r3, r0
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_InitTick+0xac>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	3b01      	subs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0xb0>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_InitTick+0xb0>)
 800071a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_InitTick+0xb0>)
 8000722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000724:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_InitTick+0xb0>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_InitTick+0xb0>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <HAL_InitTick+0xb0>)
 8000734:	f000 ffe2 	bl	80016fc <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d104      	bne.n	8000748 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <HAL_InitTick+0xb0>)
 8000740:	f001 f8d6 	bl	80018f0 <HAL_TIM_Base_Start_IT>
 8000744:	4603      	mov	r3, r0
 8000746:	e000      	b.n	800074a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
}
 800074a:	4618      	mov	r0, r3
 800074c:	3730      	adds	r7, #48	; 0x30
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	431bde83 	.word	0x431bde83
 800075c:	20000030 	.word	0x20000030

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM2_IRQHandler+0x10>)
 80007b6:	f001 f961 	bl	8001a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000030 	.word	0x20000030

080007c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fa:	f7ff ffe3 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f001 fb19 	bl	8001e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000802:	f7ff fe63 	bl	80004cc <main>
  bx  lr
 8000806:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000814:	08001fb0 	.word	0x08001fb0
  ldr r2, =_sbss
 8000818:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800081c:	2000007c 	.word	0x2000007c

08000820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_Init+0x40>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_Init+0x40>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x40>)
 8000846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f8d1 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	200f      	movs	r0, #15
 8000854:	f7ff ff2a 	bl	80006ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff fee2 	bl	8000620 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023c00 	.word	0x40023c00

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000008 	.word	0x20000008
 8000888:	20000078 	.word	0x20000078

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000078 	.word	0x20000078

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <__NVIC_EnableIRQ+0x34>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d00f      	beq.n	8000a22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b06      	cmp	r3, #6
 8000a06:	d00c      	beq.n	8000a22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d009      	beq.n	8000a22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d006      	beq.n	8000a22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d003      	beq.n	8000a22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a1a:	2192      	movs	r1, #146	; 0x92
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000a1e:	f7ff fdf5 	bl	800060c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff3c 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08001ea4 	.word	0x08001ea4

08000a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d903      	bls.n	8000a54 <HAL_NVIC_SetPriority+0x20>
 8000a4c:	21aa      	movs	r1, #170	; 0xaa
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <HAL_NVIC_SetPriority+0x54>)
 8000a50:	f7ff fddc 	bl	800060c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d903      	bls.n	8000a62 <HAL_NVIC_SetPriority+0x2e>
 8000a5a:	21ab      	movs	r1, #171	; 0xab
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <HAL_NVIC_SetPriority+0x54>)
 8000a5e:	f7ff fdd5 	bl	800060c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a62:	f7ff ff41 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	68b9      	ldr	r1, [r7, #8]
 8000a6c:	6978      	ldr	r0, [r7, #20]
 8000a6e:	f7ff ff8f 	bl	8000990 <NVIC_EncodePriority>
 8000a72:	4602      	mov	r2, r0
 8000a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff5e 	bl	800093c <__NVIC_SetPriority>
}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	08001ea4 	.word	0x08001ea4

08000a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	da03      	bge.n	8000aa6 <HAL_NVIC_EnableIRQ+0x1a>
 8000a9e:	21be      	movs	r1, #190	; 0xbe
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000aa2:	f7ff fdb3 	bl	800060c <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff2a 	bl	8000904 <__NVIC_EnableIRQ>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08001ea4 	.word	0x08001ea4

08000abc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e017      	b.n	8000afe <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_CRC_Init+0x4c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d003      	beq.n	8000ae0 <HAL_CRC_Init+0x24>
 8000ad8:	2168      	movs	r1, #104	; 0x68
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HAL_CRC_Init+0x50>)
 8000adc:	f7ff fd96 	bl	800060c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d105      	bne.n	8000af6 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fdbb 	bl	800066c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023000 	.word	0x40023000
 8000b0c:	08001ee0 	.word	0x08001ee0

08000b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e2eb      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d904      	bls.n	8000b34 <HAL_RCC_OscConfig+0x24>
 8000b2a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8000b2e:	489a      	ldr	r0, [pc, #616]	; (8000d98 <HAL_RCC_OscConfig+0x288>)
 8000b30:	f7ff fd6c 	bl	800060c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d061      	beq.n	8000c04 <HAL_RCC_OscConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00c      	beq.n	8000b62 <HAL_RCC_OscConfig+0x52>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d008      	beq.n	8000b62 <HAL_RCC_OscConfig+0x52>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d004      	beq.n	8000b62 <HAL_RCC_OscConfig+0x52>
 8000b58:	f240 1167 	movw	r1, #359	; 0x167
 8000b5c:	488e      	ldr	r0, [pc, #568]	; (8000d98 <HAL_RCC_OscConfig+0x288>)
 8000b5e:	f7ff fd55 	bl	800060c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b62:	4b8e      	ldr	r3, [pc, #568]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d00c      	beq.n	8000b88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b6e:	4b8b      	ldr	r3, [pc, #556]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d112      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x90>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b7a:	4b88      	ldr	r3, [pc, #544]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b86:	d10b      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x90>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b88:	4b84      	ldr	r3, [pc, #528]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d036      	beq.n	8000c02 <HAL_RCC_OscConfig+0xf2>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d132      	bne.n	8000c02 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e2ac      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4b7e      	ldr	r3, [pc, #504]	; (8000da0 <HAL_RCC_OscConfig+0x290>)
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d013      	beq.n	8000bda <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fe6b 	bl	800088c <HAL_GetTick>
 8000bb6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0xbc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bba:	f7ff fe67 	bl	800088c <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e296      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bcc:	4b73      	ldr	r3, [pc, #460]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f0      	beq.n	8000bba <HAL_RCC_OscConfig+0xaa>
 8000bd8:	e014      	b.n	8000c04 <HAL_RCC_OscConfig+0xf4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bda:	f7ff fe57 	bl	800088c <HAL_GetTick>
 8000bde:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be2:	f7ff fe53 	bl	800088c <HAL_GetTick>
 8000be6:	4602      	mov	r2, r0
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b64      	cmp	r3, #100	; 0x64
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0xe4>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e282      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf4:	4b69      	ldr	r3, [pc, #420]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f0      	bne.n	8000be2 <HAL_RCC_OscConfig+0xd2>
 8000c00:	e000      	b.n	8000c04 <HAL_RCC_OscConfig+0xf4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 808e 	beq.w	8000d2e <HAL_RCC_OscConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d008      	beq.n	8000c2c <HAL_RCC_OscConfig+0x11c>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d004      	beq.n	8000c2c <HAL_RCC_OscConfig+0x11c>
 8000c22:	f240 1199 	movw	r1, #409	; 0x199
 8000c26:	485c      	ldr	r0, [pc, #368]	; (8000d98 <HAL_RCC_OscConfig+0x288>)
 8000c28:	f7ff fcf0 	bl	800060c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b1f      	cmp	r3, #31
 8000c32:	d904      	bls.n	8000c3e <HAL_RCC_OscConfig+0x12e>
 8000c34:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8000c38:	4857      	ldr	r0, [pc, #348]	; (8000d98 <HAL_RCC_OscConfig+0x288>)
 8000c3a:	f7ff fce7 	bl	800060c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d126      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x194>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d120      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x16a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x16a>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e23f      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7a:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	21f8      	movs	r1, #248	; 0xf8
 8000c88:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	69b9      	ldr	r1, [r7, #24]
 8000c8c:	fa91 f1a1 	rbit	r1, r1
 8000c90:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c92:	6979      	ldr	r1, [r7, #20]
 8000c94:	fab1 f181 	clz	r1, r1
 8000c98:	b2c9      	uxtb	r1, r1
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	493f      	ldr	r1, [pc, #252]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	e044      	b.n	8000d2e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d02a      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1f2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x294>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fdeb 	bl	800088c <HAL_GetTick>
 8000cb6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	e008      	b.n	8000ccc <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cba:	f7ff fde7 	bl	800088c <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d901      	bls.n	8000ccc <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e216      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f0      	beq.n	8000cba <HAL_RCC_OscConfig+0x1aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd8:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	21f8      	movs	r1, #248	; 0xf8
 8000ce6:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	fa91 f1a1 	rbit	r1, r1
 8000cee:	60f9      	str	r1, [r7, #12]
  return result;
 8000cf0:	68f9      	ldr	r1, [r7, #12]
 8000cf2:	fab1 f181 	clz	r1, r1
 8000cf6:	b2c9      	uxtb	r1, r1
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	4928      	ldr	r1, [pc, #160]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x21e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_RCC_OscConfig+0x294>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fdc0 	bl	800088c <HAL_GetTick>
 8000d0c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fdbc 	bl	800088c <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x212>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e1eb      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x200>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d047      	beq.n	8000dca <HAL_RCC_OscConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <HAL_RCC_OscConfig+0x244>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d004      	beq.n	8000d54 <HAL_RCC_OscConfig+0x244>
 8000d4a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8000d4e:	4812      	ldr	r0, [pc, #72]	; (8000d98 <HAL_RCC_OscConfig+0x288>)
 8000d50:	f7ff fc5c 	bl	800060c <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d016      	beq.n	8000d8a <HAL_RCC_OscConfig+0x27a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_RCC_OscConfig+0x298>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d62:	f7ff fd93 	bl	800088c <HAL_GetTick>
 8000d66:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x26c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fd8f 	bl	800088c <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x26c>
        {
          return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e1be      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_RCC_OscConfig+0x28c>)
 8000d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x25a>
 8000d88:	e01f      	b.n	8000dca <HAL_RCC_OscConfig+0x2ba>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_RCC_OscConfig+0x298>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d90:	f7ff fd7c 	bl	800088c <HAL_GetTick>
 8000d94:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d96:	e012      	b.n	8000dbe <HAL_RCC_OscConfig+0x2ae>
 8000d98:	08001f18 	.word	0x08001f18
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40023802 	.word	0x40023802
 8000da4:	42470000 	.word	0x42470000
 8000da8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fd6e 	bl	800088c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x2ae>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e19d      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbe:	4b9d      	ldr	r3, [pc, #628]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x29c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 808e 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x3e4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x2f0>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d008      	beq.n	8000e00 <HAL_RCC_OscConfig+0x2f0>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d004      	beq.n	8000e00 <HAL_RCC_OscConfig+0x2f0>
 8000df6:	f240 2106 	movw	r1, #518	; 0x206
 8000dfa:	488f      	ldr	r0, [pc, #572]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000dfc:	f7ff fc06 	bl	800060c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d110      	bne.n	8000e2e <HAL_RCC_OscConfig+0x31e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b88      	ldr	r3, [pc, #544]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a87      	ldr	r2, [pc, #540]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b85      	ldr	r3, [pc, #532]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e2e:	4b83      	ldr	r3, [pc, #524]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a82      	ldr	r2, [pc, #520]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3a:	4b80      	ldr	r3, [pc, #512]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d118      	bne.n	8000e78 <HAL_RCC_OscConfig+0x368>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e46:	4b7d      	ldr	r3, [pc, #500]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a7c      	ldr	r2, [pc, #496]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e52:	f7ff fd1b 	bl	800088c <HAL_GetTick>
 8000e56:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x35c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5a:	f7ff fd17 	bl	800088c <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e146      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	4b73      	ldr	r3, [pc, #460]	; (800103c <HAL_RCC_OscConfig+0x52c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	4b70      	ldr	r3, [pc, #448]	; (8001040 <HAL_RCC_OscConfig+0x530>)
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d015      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fcff 	bl	800088c <HAL_GetTick>
 8000e8e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e90:	e00a      	b.n	8000ea8 <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e92:	f7ff fcfb 	bl	800088c <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e128      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	4b62      	ldr	r3, [pc, #392]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0ee      	beq.n	8000e92 <HAL_RCC_OscConfig+0x382>
 8000eb4:	e014      	b.n	8000ee0 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fce9 	bl	800088c <HAL_GetTick>
 8000eba:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebc:	e00a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff fce5 	bl	800088c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e112      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1ee      	bne.n	8000ebe <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x3e4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <HAL_RCC_OscConfig+0x406>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d008      	beq.n	8000f16 <HAL_RCC_OscConfig+0x406>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d004      	beq.n	8000f16 <HAL_RCC_OscConfig+0x406>
 8000f0c:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000f10:	4849      	ldr	r0, [pc, #292]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000f12:	f7ff fb7b 	bl	800060c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80ec 	beq.w	80010f8 <HAL_RCC_OscConfig+0x5e8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f20:	4b44      	ldr	r3, [pc, #272]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	f000 80b6 	beq.w	800109a <HAL_RCC_OscConfig+0x58a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	f040 809a 	bne.w	800106c <HAL_RCC_OscConfig+0x55c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <HAL_RCC_OscConfig+0x444>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f48:	d004      	beq.n	8000f54 <HAL_RCC_OscConfig+0x444>
 8000f4a:	f240 2155 	movw	r1, #597	; 0x255
 8000f4e:	483a      	ldr	r0, [pc, #232]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000f50:	f7ff fb5c 	bl	800060c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	2b3f      	cmp	r3, #63	; 0x3f
 8000f5a:	d904      	bls.n	8000f66 <HAL_RCC_OscConfig+0x456>
 8000f5c:	f240 2156 	movw	r1, #598	; 0x256
 8000f60:	4835      	ldr	r0, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000f62:	f7ff fb53 	bl	800060c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	2bbf      	cmp	r3, #191	; 0xbf
 8000f6c:	d904      	bls.n	8000f78 <HAL_RCC_OscConfig+0x468>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8000f76:	d904      	bls.n	8000f82 <HAL_RCC_OscConfig+0x472>
 8000f78:	f240 2157 	movw	r1, #599	; 0x257
 8000f7c:	482e      	ldr	r0, [pc, #184]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000f7e:	f7ff fb45 	bl	800060c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d010      	beq.n	8000fac <HAL_RCC_OscConfig+0x49c>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d00c      	beq.n	8000fac <HAL_RCC_OscConfig+0x49c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d008      	beq.n	8000fac <HAL_RCC_OscConfig+0x49c>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d004      	beq.n	8000fac <HAL_RCC_OscConfig+0x49c>
 8000fa2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000fa6:	4824      	ldr	r0, [pc, #144]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000fa8:	f7ff fb30 	bl	800060c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d903      	bls.n	8000fbc <HAL_RCC_OscConfig+0x4ac>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d904      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x4b6>
 8000fbc:	f240 2159 	movw	r1, #601	; 0x259
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <HAL_RCC_OscConfig+0x528>)
 8000fc2:	f7ff fb23 	bl	800060c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_RCC_OscConfig+0x534>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc5e 	bl	800088c <HAL_GetTick>
 8000fd0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fc5a 	bl	800088c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e089      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_RCC_OscConfig+0x538>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	69d1      	ldr	r1, [r2, #28]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6a12      	ldr	r2, [r2, #32]
 8001002:	4311      	orrs	r1, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	4311      	orrs	r1, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001010:	0612      	lsls	r2, r2, #24
 8001012:	4311      	orrs	r1, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001018:	0852      	lsrs	r2, r2, #1
 800101a:	3a01      	subs	r2, #1
 800101c:	0412      	lsls	r2, r2, #16
 800101e:	430a      	orrs	r2, r1
 8001020:	4904      	ldr	r1, [pc, #16]	; (8001034 <HAL_RCC_OscConfig+0x524>)
 8001022:	4313      	orrs	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_RCC_OscConfig+0x534>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fc2e 	bl	800088c <HAL_GetTick>
 8001030:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x54e>
 8001034:	40023800 	.word	0x40023800
 8001038:	08001f18 	.word	0x08001f18
 800103c:	40007000 	.word	0x40007000
 8001040:	40023870 	.word	0x40023870
 8001044:	42470060 	.word	0x42470060
 8001048:	f0bc8000 	.word	0xf0bc8000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fc1e 	bl	800088c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e04d      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <HAL_RCC_OscConfig+0x5f4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x53c>
 800106a:	e045      	b.n	80010f8 <HAL_RCC_OscConfig+0x5e8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x5f8>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff fc0b 	bl	800088c <HAL_GetTick>
 8001076:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x57c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107a:	f7ff fc07 	bl	800088c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	; 0x64
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e036      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_RCC_OscConfig+0x5f4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f0      	bne.n	800107a <HAL_RCC_OscConfig+0x56a>
 8001098:	e02e      	b.n	80010f8 <HAL_RCC_OscConfig+0x5e8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_OscConfig+0x596>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e029      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_RCC_OscConfig+0x5f4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d11c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5e4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d115      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5e4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	099b      	lsrs	r3, r3, #6
 80010cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5e4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5e4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x5e8>
        {
          return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	42470060 	.word	0x42470060

0800110c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e176      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_RCC_ClockConfig+0x24>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d904      	bls.n	800113a <HAL_RCC_ClockConfig+0x2e>
 8001130:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001134:	4877      	ldr	r0, [pc, #476]	; (8001314 <HAL_RCC_ClockConfig+0x208>)
 8001136:	f7ff fa69 	bl	800060c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d019      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d016      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d013      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d010      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00d      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d00a      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b06      	cmp	r3, #6
 8001162:	d007      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d004      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
 800116a:	f240 21d1 	movw	r1, #721	; 0x2d1
 800116e:	4869      	ldr	r0, [pc, #420]	; (8001314 <HAL_RCC_ClockConfig+0x208>)
 8001170:	f7ff fa4c 	bl	800060c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d90c      	bls.n	800119c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d001      	beq.n	800119c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e138      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d049      	beq.n	800123c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a58      	ldr	r2, [pc, #352]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80011ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80011cc:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80011d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d024      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b80      	cmp	r3, #128	; 0x80
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b90      	cmp	r3, #144	; 0x90
 80011ee:	d01c      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2ba0      	cmp	r3, #160	; 0xa0
 80011f6:	d018      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2bb0      	cmp	r3, #176	; 0xb0
 80011fe:	d014      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2bc0      	cmp	r3, #192	; 0xc0
 8001206:	d010      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2bd0      	cmp	r3, #208	; 0xd0
 800120e:	d00c      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2be0      	cmp	r3, #224	; 0xe0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2bf0      	cmp	r3, #240	; 0xf0
 800121e:	d004      	beq.n	800122a <HAL_RCC_ClockConfig+0x11e>
 8001220:	f240 21f5 	movw	r1, #757	; 0x2f5
 8001224:	483b      	ldr	r0, [pc, #236]	; (8001314 <HAL_RCC_ClockConfig+0x208>)
 8001226:	f7ff f9f1 	bl	800060c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 8001238:	4313      	orrs	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d051      	beq.n	80012ec <HAL_RCC_ClockConfig+0x1e0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00c      	beq.n	800126a <HAL_RCC_ClockConfig+0x15e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x15e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d004      	beq.n	800126a <HAL_RCC_ClockConfig+0x15e>
 8001260:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8001264:	482b      	ldr	r0, [pc, #172]	; (8001314 <HAL_RCC_ClockConfig+0x208>)
 8001266:	f7ff f9d1 	bl	800060c <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0x176>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d115      	bne.n	80012aa <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0c5      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0x18e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0b9      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0b1      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4919      	ldr	r1, [pc, #100]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff fae6 	bl	800088c <HAL_GetTick>
 80012c0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x1ce>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff fae2 	bl	800088c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x1ce>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e099      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_RCC_ClockConfig+0x210>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x1b8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d212      	bcs.n	8001320 <HAL_RCC_ClockConfig+0x214>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_RCC_ClockConfig+0x20c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d007      	beq.n	8001320 <HAL_RCC_ClockConfig+0x214>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e07c      	b.n	800140e <HAL_RCC_ClockConfig+0x302>
 8001314:	08001f18 	.word	0x08001f18
 8001318:	40023c00 	.word	0x40023c00
 800131c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d025      	beq.n	8001378 <HAL_RCC_ClockConfig+0x26c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <HAL_RCC_ClockConfig+0x25a>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800133c:	d013      	beq.n	8001366 <HAL_RCC_ClockConfig+0x25a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001346:	d00e      	beq.n	8001366 <HAL_RCC_ClockConfig+0x25a>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001350:	d009      	beq.n	8001366 <HAL_RCC_ClockConfig+0x25a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800135a:	d004      	beq.n	8001366 <HAL_RCC_ClockConfig+0x25a>
 800135c:	f240 3139 	movw	r1, #825	; 0x339
 8001360:	482d      	ldr	r0, [pc, #180]	; (8001418 <HAL_RCC_ClockConfig+0x30c>)
 8001362:	f7ff f953 	bl	800060c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_RCC_ClockConfig+0x310>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	492a      	ldr	r1, [pc, #168]	; (800141c <HAL_RCC_ClockConfig+0x310>)
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d026      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x2c6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d018      	beq.n	80013be <HAL_RCC_ClockConfig+0x2b2>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001394:	d013      	beq.n	80013be <HAL_RCC_ClockConfig+0x2b2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800139e:	d00e      	beq.n	80013be <HAL_RCC_ClockConfig+0x2b2>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80013a8:	d009      	beq.n	80013be <HAL_RCC_ClockConfig+0x2b2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80013b2:	d004      	beq.n	80013be <HAL_RCC_ClockConfig+0x2b2>
 80013b4:	f44f 7150 	mov.w	r1, #832	; 0x340
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_RCC_ClockConfig+0x30c>)
 80013ba:	f7ff f927 	bl	800060c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_RCC_ClockConfig+0x310>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <HAL_RCC_ClockConfig+0x310>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80013d2:	f000 f82b 	bl	800142c <HAL_RCC_GetSysClockFreq>
 80013d6:	4601      	mov	r1, r0
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_ClockConfig+0x310>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013e0:	22f0      	movs	r2, #240	; 0xf0
 80013e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	60fa      	str	r2, [r7, #12]
  return result;
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	fab2 f282 	clz	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	40d3      	lsrs	r3, r2
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_RCC_ClockConfig+0x314>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	fa21 f303 	lsr.w	r3, r1, r3
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x318>)
 8001400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x31c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f950 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08001f18 	.word	0x08001f18
 800141c:	40023800 	.word	0x40023800
 8001420:	08001f88 	.word	0x08001f88
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800142c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001430:	b094      	sub	sp, #80	; 0x50
 8001432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
 8001438:	2300      	movs	r3, #0
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d00d      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x40>
 8001450:	2b08      	cmp	r3, #8
 8001452:	f200 80e7 	bhi.w	8001624 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x34>
 800145a:	2b04      	cmp	r3, #4
 800145c:	d003      	beq.n	8001466 <HAL_RCC_GetSysClockFreq+0x3a>
 800145e:	e0e1      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001460:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_GetSysClockFreq+0x210>)
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001464:	e0e1      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_GetSysClockFreq+0x214>)
 8001468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800146a:	e0de      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146c:	4b72      	ldr	r3, [pc, #456]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001476:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d065      	beq.n	800154e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	099b      	lsrs	r3, r3, #6
 8001488:	2200      	movs	r2, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
 800148c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
 800149a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800149e:	4622      	mov	r2, r4
 80014a0:	462b      	mov	r3, r5
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	0159      	lsls	r1, r3, #5
 80014ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b0:	0150      	lsls	r0, r2, #5
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4621      	mov	r1, r4
 80014b8:	1a51      	subs	r1, r2, r1
 80014ba:	6139      	str	r1, [r7, #16]
 80014bc:	4629      	mov	r1, r5
 80014be:	eb63 0301 	sbc.w	r3, r3, r1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80014d0:	4659      	mov	r1, fp
 80014d2:	018b      	lsls	r3, r1, #6
 80014d4:	4651      	mov	r1, sl
 80014d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014da:	4651      	mov	r1, sl
 80014dc:	018a      	lsls	r2, r1, #6
 80014de:	46d4      	mov	ip, sl
 80014e0:	ebb2 080c 	subs.w	r8, r2, ip
 80014e4:	4659      	mov	r1, fp
 80014e6:	eb63 0901 	sbc.w	r9, r3, r1
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014fe:	4690      	mov	r8, r2
 8001500:	4699      	mov	r9, r3
 8001502:	4623      	mov	r3, r4
 8001504:	eb18 0303 	adds.w	r3, r8, r3
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	462b      	mov	r3, r5
 800150c:	eb49 0303 	adc.w	r3, r9, r3
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800151e:	4629      	mov	r1, r5
 8001520:	024b      	lsls	r3, r1, #9
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	4604      	mov	r4, r0
 8001528:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800152c:	4601      	mov	r1, r0
 800152e:	024a      	lsls	r2, r1, #9
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001536:	2200      	movs	r2, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
 800153a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800153c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001540:	f7fe fe40 	bl	80001c4 <__aeabi_uldivmod>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4613      	mov	r3, r2
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800154c:	e05c      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	099b      	lsrs	r3, r3, #6
 8001554:	2200      	movs	r2, #0
 8001556:	4618      	mov	r0, r3
 8001558:	4611      	mov	r1, r2
 800155a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001568:	4642      	mov	r2, r8
 800156a:	464b      	mov	r3, r9
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	0159      	lsls	r1, r3, #5
 8001576:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800157a:	0150      	lsls	r0, r2, #5
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	46c4      	mov	ip, r8
 8001582:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001586:	4640      	mov	r0, r8
 8001588:	4649      	mov	r1, r9
 800158a:	468c      	mov	ip, r1
 800158c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800159c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015a4:	ebb2 040a 	subs.w	r4, r2, sl
 80015a8:	eb63 050b 	sbc.w	r5, r3, fp
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	00eb      	lsls	r3, r5, #3
 80015b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ba:	00e2      	lsls	r2, r4, #3
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	18e3      	adds	r3, r4, r3
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	460b      	mov	r3, r1
 80015c8:	eb45 0303 	adc.w	r3, r5, r3
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015da:	4629      	mov	r1, r5
 80015dc:	028b      	lsls	r3, r1, #10
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	4604      	mov	r4, r0
 80015e4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80015e8:	4601      	mov	r1, r0
 80015ea:	028a      	lsls	r2, r1, #10
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f2:	2200      	movs	r2, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	61fa      	str	r2, [r7, #28]
 80015f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015fc:	f7fe fde2 	bl	80001c4 <__aeabi_uldivmod>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4613      	mov	r3, r2
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_RCC_GetSysClockFreq+0x20c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	3301      	adds	r3, #1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800161a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001622:	e002      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_RCC_GetSysClockFreq+0x210>)
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800162c:	4618      	mov	r0, r3
 800162e:	3750      	adds	r7, #80	; 0x50
 8001630:	46bd      	mov	sp, r7
 8001632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	00f42400 	.word	0x00f42400
 8001640:	007a1200 	.word	0x007a1200

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_RCC_GetHCLKFreq+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000000 	.word	0x20000000

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800165e:	f7ff fff1 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001662:	4601      	mov	r1, r0
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800166c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001670:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	603a      	str	r2, [r7, #0]
  return result;
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	fab2 f282 	clz	r2, r2
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	40d3      	lsrs	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	fa21 f303 	lsr.w	r3, r1, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	08001f98 	.word	0x08001f98

0800169c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	220f      	movs	r2, #15
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_RCC_GetClockConfig+0x58>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_RCC_GetClockConfig+0x58>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_GetClockConfig+0x58>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_RCC_GetClockConfig+0x58>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 020f 	and.w	r2, r3, #15
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40023c00 	.word	0x40023c00

080016fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0c5      	b.n	800189a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a64      	ldr	r2, [pc, #400]	; (80018a4 <HAL_TIM_Base_Init+0x1a8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d045      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d040      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <HAL_TIM_Base_Init+0x1ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d03b      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_TIM_Base_Init+0x1b0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d036      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_TIM_Base_Init+0x1b4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d031      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_TIM_Base_Init+0x1b8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d02c      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a5a      	ldr	r2, [pc, #360]	; (80018b8 <HAL_TIM_Base_Init+0x1bc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d027      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_TIM_Base_Init+0x1c0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d022      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a57      	ldr	r2, [pc, #348]	; (80018c0 <HAL_TIM_Base_Init+0x1c4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d01d      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_TIM_Base_Init+0x1c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d018      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_TIM_Base_Init+0x1cc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d013      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_TIM_Base_Init+0x1d0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00e      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_TIM_Base_Init+0x1d4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d009      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_TIM_Base_Init+0x1d8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_TIM_Base_Init+0xa8>
 800179a:	f240 1113 	movw	r1, #275	; 0x113
 800179e:	484e      	ldr	r0, [pc, #312]	; (80018d8 <HAL_TIM_Base_Init+0x1dc>)
 80017a0:	f7fe ff34 	bl	800060c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d014      	beq.n	80017d6 <HAL_TIM_Base_Init+0xda>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d010      	beq.n	80017d6 <HAL_TIM_Base_Init+0xda>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d00c      	beq.n	80017d6 <HAL_TIM_Base_Init+0xda>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d008      	beq.n	80017d6 <HAL_TIM_Base_Init+0xda>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b60      	cmp	r3, #96	; 0x60
 80017ca:	d004      	beq.n	80017d6 <HAL_TIM_Base_Init+0xda>
 80017cc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80017d0:	4841      	ldr	r0, [pc, #260]	; (80018d8 <HAL_TIM_Base_Init+0x1dc>)
 80017d2:	f7fe ff1b 	bl	800060c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00e      	beq.n	80017fc <HAL_TIM_Base_Init+0x100>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e6:	d009      	beq.n	80017fc <HAL_TIM_Base_Init+0x100>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f0:	d004      	beq.n	80017fc <HAL_TIM_Base_Init+0x100>
 80017f2:	f240 1115 	movw	r1, #277	; 0x115
 80017f6:	4838      	ldr	r0, [pc, #224]	; (80018d8 <HAL_TIM_Base_Init+0x1dc>)
 80017f8:	f7fe ff08 	bl	800060c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_TIM_Base_Init+0x11a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b80      	cmp	r3, #128	; 0x80
 800180a:	d004      	beq.n	8001816 <HAL_TIM_Base_Init+0x11a>
 800180c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001810:	4831      	ldr	r0, [pc, #196]	; (80018d8 <HAL_TIM_Base_Init+0x1dc>)
 8001812:	f7fe fefb 	bl	800060c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f856 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fa46 	bl	8001cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40000400 	.word	0x40000400
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40000c00 	.word	0x40000c00
 80018b4:	40001000 	.word	0x40001000
 80018b8:	40001400 	.word	0x40001400
 80018bc:	40010400 	.word	0x40010400
 80018c0:	40014000 	.word	0x40014000
 80018c4:	40014400 	.word	0x40014400
 80018c8:	40014800 	.word	0x40014800
 80018cc:	40001800 	.word	0x40001800
 80018d0:	40001c00 	.word	0x40001c00
 80018d4:	40002000 	.word	0x40002000
 80018d8:	08001f50 	.word	0x08001f50

080018dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_TIM_Base_Start_IT+0x154>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d045      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190a:	d040      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_TIM_Base_Start_IT+0x158>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d03b      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_TIM_Base_Start_IT+0x15c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d036      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <HAL_TIM_Base_Start_IT+0x160>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d031      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_TIM_Base_Start_IT+0x164>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d02c      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <HAL_TIM_Base_Start_IT+0x168>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d027      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a46      	ldr	r2, [pc, #280]	; (8001a5c <HAL_TIM_Base_Start_IT+0x16c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a44      	ldr	r2, [pc, #272]	; (8001a60 <HAL_TIM_Base_Start_IT+0x170>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01d      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <HAL_TIM_Base_Start_IT+0x174>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d018      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_TIM_Base_Start_IT+0x178>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_TIM_Base_Start_IT+0x17c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00e      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_TIM_Base_Start_IT+0x180>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d009      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <HAL_TIM_Base_Start_IT+0x184>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d004      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x9e>
 8001984:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001988:	483b      	ldr	r0, [pc, #236]	; (8001a78 <HAL_TIM_Base_Start_IT+0x188>)
 800198a:	f7fe fe3f 	bl	800060c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e04e      	b.n	8001a3c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_TIM_Base_Start_IT+0x154>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d01d      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_TIM_Base_Start_IT+0x158>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_TIM_Base_Start_IT+0x15c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_TIM_Base_Start_IT+0x160>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1b      	ldr	r2, [pc, #108]	; (8001a5c <HAL_TIM_Base_Start_IT+0x16c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_TIM_Base_Start_IT+0x170>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_TIM_Base_Start_IT+0x116>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_TIM_Base_Start_IT+0x17c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d111      	bne.n	8001a2a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d010      	beq.n	8001a3a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a28:	e007      	b.n	8001a3a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40000800 	.word	0x40000800
 8001a50:	40000c00 	.word	0x40000c00
 8001a54:	40001000 	.word	0x40001000
 8001a58:	40001400 	.word	0x40001400
 8001a5c:	40010400 	.word	0x40010400
 8001a60:	40014000 	.word	0x40014000
 8001a64:	40014400 	.word	0x40014400
 8001a68:	40014800 	.word	0x40014800
 8001a6c:	40001800 	.word	0x40001800
 8001a70:	40001c00 	.word	0x40001c00
 8001a74:	40002000 	.word	0x40002000
 8001a78:	08001f50 	.word	0x08001f50

08001a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0202 	mvn.w	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8ed 	bl	8001c9e <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8e0 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8ef 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0204 	mvn.w	r2, #4
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8c3 	bl	8001c9e <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8b6 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8c5 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0208 	mvn.w	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f899 	bl	8001c9e <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f88c 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f89b 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0210 	mvn.w	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f86f 	bl	8001c9e <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f862 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f871 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0201 	mvn.w	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fcf2 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b80      	cmp	r3, #128	; 0x80
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8fb 	bl	8001e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f835 	bl	8001cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8c6 	bl	8001e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <TIM_Base_SetConfig+0x110>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d00f      	beq.n	8001d14 <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3c      	ldr	r2, [pc, #240]	; (8001de8 <TIM_Base_SetConfig+0x114>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00b      	beq.n	8001d14 <TIM_Base_SetConfig+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <TIM_Base_SetConfig+0x118>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <TIM_Base_SetConfig+0x40>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <TIM_Base_SetConfig+0x11c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <TIM_Base_SetConfig+0x120>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <TIM_Base_SetConfig+0x110>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d027      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <TIM_Base_SetConfig+0x114>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d023      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <TIM_Base_SetConfig+0x118>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <TIM_Base_SetConfig+0x11c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01b      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <TIM_Base_SetConfig+0x120>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d017      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <TIM_Base_SetConfig+0x124>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <TIM_Base_SetConfig+0x128>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00f      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <TIM_Base_SetConfig+0x12c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00b      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <TIM_Base_SetConfig+0x130>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <TIM_Base_SetConfig+0x134>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <TIM_Base_SetConfig+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <TIM_Base_SetConfig+0x110>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0xf8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <TIM_Base_SetConfig+0x120>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800
 8001df0:	40000c00 	.word	0x40000c00
 8001df4:	40010400 	.word	0x40010400
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800
 8001e04:	40001800 	.word	0x40001800
 8001e08:	40001c00 	.word	0x40001c00
 8001e0c:	40002000 	.word	0x40002000

08001e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <__libc_init_array>:
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	2600      	movs	r6, #0
 8001e38:	4d0c      	ldr	r5, [pc, #48]	; (8001e6c <__libc_init_array+0x38>)
 8001e3a:	4c0d      	ldr	r4, [pc, #52]	; (8001e70 <__libc_init_array+0x3c>)
 8001e3c:	1b64      	subs	r4, r4, r5
 8001e3e:	10a4      	asrs	r4, r4, #2
 8001e40:	42a6      	cmp	r6, r4
 8001e42:	d109      	bne.n	8001e58 <__libc_init_array+0x24>
 8001e44:	f000 f822 	bl	8001e8c <_init>
 8001e48:	2600      	movs	r6, #0
 8001e4a:	4d0a      	ldr	r5, [pc, #40]	; (8001e74 <__libc_init_array+0x40>)
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <__libc_init_array+0x44>)
 8001e4e:	1b64      	subs	r4, r4, r5
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	42a6      	cmp	r6, r4
 8001e54:	d105      	bne.n	8001e62 <__libc_init_array+0x2e>
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
 8001e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e5c:	4798      	blx	r3
 8001e5e:	3601      	adds	r6, #1
 8001e60:	e7ee      	b.n	8001e40 <__libc_init_array+0xc>
 8001e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e66:	4798      	blx	r3
 8001e68:	3601      	adds	r6, #1
 8001e6a:	e7f2      	b.n	8001e52 <__libc_init_array+0x1e>
 8001e6c:	08001fa8 	.word	0x08001fa8
 8001e70:	08001fa8 	.word	0x08001fa8
 8001e74:	08001fa8 	.word	0x08001fa8
 8001e78:	08001fac 	.word	0x08001fac

08001e7c <memset>:
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4402      	add	r2, r0
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d100      	bne.n	8001e86 <memset+0xa>
 8001e84:	4770      	bx	lr
 8001e86:	f803 1b01 	strb.w	r1, [r3], #1
 8001e8a:	e7f9      	b.n	8001e80 <memset+0x4>

08001e8c <_init>:
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8e:	bf00      	nop
 8001e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e92:	bc08      	pop	{r3}
 8001e94:	469e      	mov	lr, r3
 8001e96:	4770      	bx	lr

08001e98 <_fini>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	bf00      	nop
 8001e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9e:	bc08      	pop	{r3}
 8001ea0:	469e      	mov	lr, r3
 8001ea2:	4770      	bx	lr
